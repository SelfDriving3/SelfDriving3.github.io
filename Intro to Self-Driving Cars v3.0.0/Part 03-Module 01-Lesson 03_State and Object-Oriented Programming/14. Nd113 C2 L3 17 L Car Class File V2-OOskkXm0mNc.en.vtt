WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.460
Here is a car.py file.

00:00:02.460 --> 00:00:06.195
Let's take a look at the code in here line by line.

00:00:06.195 --> 00:00:08.910
First, you'll note the things in red,

00:00:08.910 --> 00:00:11.805
which are just comments that describe the class.

00:00:11.805 --> 00:00:16.035
It describes what the class does and what attributes it has,

00:00:16.035 --> 00:00:18.990
and comments like these are good practice especially

00:00:18.990 --> 00:00:22.275
if you want your code to be understood by other developers.

00:00:22.275 --> 00:00:24.255
Now, if we scroll down a bit,

00:00:24.255 --> 00:00:27.420
one of the first things you see is a class car.

00:00:27.420 --> 00:00:32.100
This looks a bit like a function declaration but the word class let's Python know

00:00:32.100 --> 00:00:36.930
that the code that follows should describe the state and functionality of a car object.

00:00:36.930 --> 00:00:39.705
Objects are also always capitalized,

00:00:39.705 --> 00:00:42.255
and so we see that car is capitalized here.

00:00:42.255 --> 00:00:45.590
Next, we see the init function which is responsible for

00:00:45.590 --> 00:00:49.465
creating space in memory to make a specific car object like Karla.

00:00:49.465 --> 00:00:54.350
So when you run code like car.Car and pass in some initial parameters,

00:00:54.350 --> 00:00:56.395
this is the function that's called.

00:00:56.395 --> 00:00:58.910
This is where the initial state is created from

00:00:58.910 --> 00:01:01.280
the position and velocity that are passed in.

00:01:01.280 --> 00:01:03.770
This is where the initial state is created from

00:01:03.770 --> 00:01:06.520
the position and velocity variables that are passed in.

00:01:06.520 --> 00:01:09.275
We also see variables for the cars world,

00:01:09.275 --> 00:01:11.165
its color, and its path.

00:01:11.165 --> 00:01:13.605
We know the world is just a 2D grid.

00:01:13.605 --> 00:01:15.165
The color we'll revisit.

00:01:15.165 --> 00:01:18.470
But for now, know that's why our car appears red in our grid,

00:01:18.470 --> 00:01:20.870
and the path is just going to be a list of

00:01:20.870 --> 00:01:24.185
locations that a car has visited that we can then visualize.

00:01:24.185 --> 00:01:27.865
So the most important lines of code in here are the state and the world,

00:01:27.865 --> 00:01:32.300
and all of the variables in here are something that a car object keeps track of.

00:01:32.300 --> 00:01:33.935
Next, if we scroll down,

00:01:33.935 --> 00:01:35.420
is the move function.

00:01:35.420 --> 00:01:38.390
The description says the move function moves the car

00:01:38.390 --> 00:01:42.120
in the direction of the velocity and updates the state.

00:01:43.040 --> 00:01:46.625
This may look familiar from our predict state function.

00:01:46.625 --> 00:01:49.640
Move uses a constant velocity model to move the car

00:01:49.640 --> 00:01:52.795
in the direction of its velocity VX and VY.

00:01:52.795 --> 00:01:57.720
Move uses a constant velocity model to move the car in the direction of its velocity,

00:01:57.720 --> 00:02:01.640
VY and VX, and if we look at one portion of this equation,

00:02:01.640 --> 00:02:04.345
we can see that it's a constant velocity model.

00:02:04.345 --> 00:02:07.019
It says Y, our initial position,

00:02:07.019 --> 00:02:12.335
plus a Y velocity times a change in time becomes our new predicted position,

00:02:12.335 --> 00:02:18.120
and at the end, we update the car state variable that was initialized in init,

00:02:18.120 --> 00:02:21.520
and this is how we track the state of the car as we move.

00:02:21.520 --> 00:02:23.705
Next, we see our turn left function,

00:02:23.705 --> 00:02:26.795
which simply rotates the velocity values to the left,

00:02:26.795 --> 00:02:30.565
and this function updates our state again with the new velocity.

00:02:30.565 --> 00:02:33.635
Finally, at the end we have this display world function,

00:02:33.635 --> 00:02:36.050
which you shouldn't change but feel free to read.

00:02:36.050 --> 00:02:38.840
This is responsible for displaying a grid world and

00:02:38.840 --> 00:02:41.980
a car within it and it uses pyplot for visualization.

00:02:41.980 --> 00:02:44.570
Next, it will be up to you to read through this code,

00:02:44.570 --> 00:02:48.050
understand how a car object like Karla tracks its own state,

00:02:48.050 --> 00:02:52.830
and together, will help write some additional functions within this car class.

